diff --git a/contrib/avrbasic/tokenizer.c b/contrib/avrbasic/tokenizer.c
index 78cfa6a..9e005e1 100644
--- a/contrib/avrbasic/tokenizer.c
+++ b/contrib/avrbasic/tokenizer.c
@@ -32,12 +32,15 @@
  * ------------------------------------------------------
  */
 
+#include "bot-logic.h"
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+#include "botfs.h"
 
 #include "ubasic_config.h"
 
-#if USE_PROGMEM
-	#include <avr/pgmspace.h>
-#endif
+//#if USE_PROGMEM
+//	#include <avr/pgmspace.h>
+//#endif
 
 #define __TOKENIZER_C__
 	#include "tokenizer_access.h"
@@ -48,7 +51,7 @@
 #include <ctype.h>
 
 #if USE_AVR
-	#include "../uart/usart.h"
+//	#include "../uart/usart.h"
 #else
 	#include <string.h>
 //	#include <ctype.h>
@@ -453,8 +456,8 @@ char const *tokenizer_last_string_ptr(void) {
 }
 /*---------------------------------------------------------------------------*/
 void tokenizer_error_print(int linenum, int error_nr) {
-//	void linenum;
-//	void error_nr;
+	(void) linenum;
+	(void) error_nr;
 	PTR_TYPE current_prog_ptr;
 	unsigned int source_linenum;
 	// alten Textpointer retten
@@ -503,11 +506,11 @@ void tokenizer_set_position(struct tokenizer_pos_t pos) {
 /*---------------------------------------------------------------------------*/
 #if TOKENIZER_FASTPARSER
 
-#include "tokenizer_data.c"
+#include "tokenizer_data.inc"
 
 int iFastParserGetKeyWord (void)  {
-  unsigned char   ucCh,                 // Zeichen im Basic-Quell-Text
-                  ucRC,                 // "Referenz"-Zeichen (zu vergleichendes Zeichen im Baum)
+  char            ucCh;                 // Zeichen im Basic-Quell-Text
+  unsigned char   ucRC,                 // "Referenz"-Zeichen (zu vergleichendes Zeichen im Baum)
                   ucS,                  // Niedrigstes erstes ASCII-Zeichen im Baum
                   ucE;                  // HÃ¶chstes erstes ASCII-Zeichen im Baum
   unsigned char  *pucPT = aucAVRBasic,  // Arbeitszeiger (mit Zeiger auf "Gesamtstruktur")
@@ -556,7 +559,7 @@ int iFastParserGetKeyWord (void)  {
 
 
   // ... dann Einsprung-Punkt in Baum holen
-  ucCh -= ucS;
+  ucCh = (char) (ucCh - ucS);
 #ifndef SFP_USES_16BIT                        // 8 bit Addressierung
   #if USE_PROGMEM                             // Tabelle liegt im Flash
   uiN   = pgm_read_byte (&(pucPT [2 + ucCh]));
@@ -691,3 +694,4 @@ int iFastParserGetKeyWord (void)  {
 }
 #endif
 
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
diff --git a/contrib/avrbasic/tokenizer_access.h b/contrib/avrbasic/tokenizer_access.h
index aa8c8c0..2fba50e 100644
--- a/contrib/avrbasic/tokenizer_access.h
+++ b/contrib/avrbasic/tokenizer_access.h
@@ -34,6 +34,8 @@
 #ifndef __TOKENIZER_ACCESS_H__
 #define __TOKENIZER_ACCESS_H__
 
+#include "behaviour_ubasic_access.h"
+
 // Basic-Quelltexte steht im Flash... (AVR)
 #if ACCESS_VIA_PGM
 	#define PTR_TYPE char const *
diff --git a/contrib/avrbasic/ubasic.c b/contrib/avrbasic/ubasic.c
index fd6c635..ebb35e6 100644
--- a/contrib/avrbasic/ubasic.c
+++ b/contrib/avrbasic/ubasic.c
@@ -31,11 +31,15 @@
  * ------------------------------------------------------
  */
 
+#include "bot-logic.h"
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+
 #include "tokenizer_access.h"
 #include "ubasic.h"
 #include "tokenizer.h"
 #include "ubasic_config.h"
 #include "ubasic_ext_proc.h"
+#include <string.h>
 
 #if !USE_AVR
 	#include <stdio.h>
@@ -54,8 +58,8 @@
 #endif
 
 #if USE_AVR
-	#include "../uart/usart.h"
-	#include <avr/io.h>
+//	#include "../uart/usart.h"
+//	#include <avr/io.h>
 	#include "ubasic_avr.h"
 #else
 	#include <ctype.h>
@@ -1154,6 +1158,7 @@ static void statement(void) {
   case TOKENIZER_LET:
     accept(TOKENIZER_LET);
     /* Fall through. */
+    // no break
   case TOKENIZER_VARIABLE:
 #if UBASIC_STRING
   case TOKENIZER_STRINGVAR:
@@ -1648,3 +1653,5 @@ long unsigned int rand31_next(void)
 }
 #endif
 /*---------------------------------------------------------------------------*/
+
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
diff --git a/contrib/avrbasic/ubasic.h b/contrib/avrbasic/ubasic.h
index fb5e287..c7a0bbc 100644
--- a/contrib/avrbasic/ubasic.h
+++ b/contrib/avrbasic/ubasic.h
@@ -33,6 +33,8 @@
 #ifndef __UBASIC_H__
 #define __UBASIC_H__
 
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+
 #include "ubasic_config.h"
 #include "tokenizer.h"
 
@@ -144,4 +146,6 @@ void accept(int token);
 int expr(void);
 void ubasic_break(void);
 
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
+
 #endif /* __UBASIC_H__ */
diff --git a/contrib/avrbasic/ubasic_call.c b/contrib/avrbasic/ubasic_call.c
index b6c1dad..917767f 100644
--- a/contrib/avrbasic/ubasic_call.c
+++ b/contrib/avrbasic/ubasic_call.c
@@ -10,6 +10,10 @@
 * ---------
 *
 ----------------------------------------------------------*/
+
+#include "bot-logic.h"
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+
 #include "tokenizer_access.h"
 #include "ubasic.h"
 #include "tokenizer.h"
@@ -25,7 +29,7 @@
 #endif
 
 #if USE_AVR
-	#include "../uart/usart.h"
+//	#include "../uart/usart.h"
 #else
 	#include <string.h>
 	#include <stdio.h> 
@@ -55,6 +59,10 @@ callfunct_t callfunct[] = {
     {"get_rtc",	.funct_ptr.UCharFuncUChar=get_DS1307,	UCHAR_FUNC_UCHAR},
 #endif
 
+	{ "bot_speed", .funct_ptr.VoidFunc2Int16 = ubasic_set_speed, VOID_FUNC_2INT16 },
+	{ "beh_active", .funct_ptr.BoolFuncBeh = ubasic_behaviour_is_active, BOOL_FUNC_BEH },
+	{ "RC", .funct_ptr.VoidFuncRC = bot_remotecall, VOID_FUNC_RC },
+
     {"",		{NULL},									255}
 };
 
@@ -69,8 +77,8 @@ int call_statement(void) {
 	int p2=0;
 	int p3=0;
 	int p4=0;
-	int r=0;
 #endif 
+	int r=0;
 	
 	accept(TOKENIZER_CALL);
 	// Parameterliste wird durch linke Klammer eingeleitet
@@ -187,8 +195,50 @@ int call_statement(void) {
 						#endif
 						break;
 #endif
+#ifdef VOID_FUNC_2INT16
+			case VOID_FUNC_2INT16: {
+				// zwei Integer und kein Rueckgabewert
+				accept(TOKENIZER_COMMA);
+				const int16_t p1 = expr();
+				accept(TOKENIZER_COMMA);
+				const int16_t p2 = expr();
+				void (* func)(int16_t, int16_t) = (void (*)(int16_t, int16_t)) pgm_read_word(&callfunct[idx].funct_ptr.VoidFunc2Int16);
+				func(p1, p2);
+				break;
+			}
+#endif // VOID_FUNC_2INT16
+#ifdef BOOL_FUNC_BEH
+			case BOOL_FUNC_BEH: {
+				uint8_t (* func)(Behaviour_t *) = (uint8_t (*)(Behaviour_t *)) pgm_read_word(&callfunct[idx].funct_ptr.BoolFuncBeh);
+				r = func(ubasic_behaviour_data);
+				break;
+			}
+#endif // BOOL_FUNC_BEH
+#ifdef VOID_FUNC_RC
+			case VOID_FUNC_RC: {
+				// Remotecall
+				accept(TOKENIZER_COMMA);
+				const char * const func = tokenizer_last_string_ptr();
+				accept(TOKENIZER_STRING);
+				remote_call_data_t params[REMOTE_CALL_MAX_PARAM] = { {0} };
+				uint8_t i;
+				for (i = 0; i < REMOTE_CALL_MAX_PARAM; ++i) {
+					if (tokenizer_token() == TOKENIZER_RIGHTPAREN) {
+						break;
+					}
+					accept(TOKENIZER_COMMA);
+					params[i].s16 = expr();
+				}
+				int8_t (* rc)(Behaviour_t *, const char *, const remote_call_data_t *) =
+					(int8_t (*)(Behaviour_t *, const char *, const remote_call_data_t *)) pgm_read_word(&callfunct[idx].funct_ptr.VoidFuncRC);
+				rc(ubasic_behaviour_data, func, params);
+				break;
+			}
+#endif // VOID_FUNC_RC
+
 			default:	tokenizer_error_print(current_linenum, UNKNOWN_CALL_FUNCT_TYP);
 						ubasic_break();
+						break;
 		}
 	}
 	// abschliessende rechte Klammer
@@ -196,3 +246,5 @@ int call_statement(void) {
 	return r;
 }
 #endif
+
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
diff --git a/contrib/avrbasic/ubasic_call.h b/contrib/avrbasic/ubasic_call.h
index 3f4cfda..80ba891 100644
--- a/contrib/avrbasic/ubasic_call.h
+++ b/contrib/avrbasic/ubasic_call.h
@@ -14,13 +14,16 @@
 #define __UBASIC_CALL_H__
 
 // Funktionspointertypen
-#define VOID_FUNC_VOID		0
-#define VOID_FUNC_INT		1
-#define INT_FUNC_INT		2
-#define VOID_FUNC_2INT		3
-#define VOID_FUNC_4INT		4
-#define VOID_FUNC_2INT_CHAR	5
-#define UCHAR_FUNC_UCHAR	6
+//#define VOID_FUNC_VOID		0
+//#define VOID_FUNC_INT		1
+//#define INT_FUNC_INT		2
+//#define VOID_FUNC_2INT		3
+//#define VOID_FUNC_4INT		4
+//#define VOID_FUNC_2INT_CHAR	5
+//#define UCHAR_FUNC_UCHAR	6
+#define VOID_FUNC_2INT16	20
+#define BOOL_FUNC_BEH		21
+#define VOID_FUNC_RC		22
 
 // Strukturdefinition fuer Funktionspointertabelle
 typedef struct {
@@ -38,6 +41,9 @@ typedef struct {
         void (*VoidFunc2IntChar)(int, int, char*);
         int  (*IntFuncInt)		(int);
         unsigned char  (*UCharFuncUChar)		(unsigned char);
+        void (*VoidFunc2Int16)	(int16_t, int16_t);
+        uint8_t  (* BoolFuncBeh) (Behaviour_t *);
+        int8_t (* VoidFuncRC)(Behaviour_t *, const char *, const remote_call_data_t *);
       } funct_ptr;
       unsigned char typ;
 } callfunct_t;
diff --git a/contrib/avrbasic/ubasic_config.h b/contrib/avrbasic/ubasic_config.h
index c5d2d78..a9cf03f 100644
--- a/contrib/avrbasic/ubasic_config.h
+++ b/contrib/avrbasic/ubasic_config.h
@@ -14,6 +14,15 @@
 #ifndef __UBASIC_CONFIG_H__
 #define __UBASIC_CONFIG_H__
 
+/* Konfiguration fuer ct-Bot */
+#include "bot-logic.h"
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+#include "log.h"
+
+#define USE_AVR    1
+#define USE_LC7981 0
+#define usart_write LOG_RAW
+#define usart_read_line(buf, len) // nicht implementiert
 
 // AVR-spezifischen einschalten
 #ifndef USE_AVR
@@ -52,7 +61,7 @@
 
 // max. Stringlaenge (Basic)
 #ifndef MAX_STRINGLEN
-	#define MAX_STRINGLEN 30
+	#define MAX_STRINGLEN 40
 #endif
 
 // max. Laenge der Eingabe beim INPUT-Befehl
@@ -76,10 +85,10 @@
 #define MAX_VARNUM 26
 
 // max. Laenge von Funktions- und Variablennamen in call(), vpeek() und vpoke()
-#define MAX_NAME_LEN	8
+#define MAX_NAME_LEN	15
 
 // maximale Laenge Programmname (gosub)
-#define MAX_PROG_NAME_LEN	13
+#define MAX_PROG_NAME_LEN	16
 
 
 // bei Verwendung des PROGMEM muess die Laenge des Schluesselwordfeldes
@@ -96,9 +105,9 @@
 #define UBASIC_SHL		1
 #define UBASIC_SHR		1
 #define UBASIC_PRINT	1
-#define UBASIC_RND		1
+#define UBASIC_RND		0
 #define UBASIC_HEX_BIN	1
-#define UBASIC_INPUT	1
+#define UBASIC_INPUT	0
 
 // externe Unterprogramme (via gosub)
 #define UBASIC_EXT_PROC	1
@@ -107,16 +116,16 @@
 // Hinweis: in dem entsprechenden Code werden malloc()/free() verwendet,
 // was, in Kombination mit anderen Routinen ausserhalb des Basic-
 // Interpreters zur Zerstueckelung des Speichers fuehren koennte
-#define UBASIC_ARRAY	1
+#define UBASIC_ARRAY	0
 
 // BASIC-Programmzeile ohne Zeilenummer erlaubt
 #define UBASIC_NO_LINENUM_ALLOWED	1
 
 // DATA/READ/RESTORE
-#define UBASIC_DATA		1
+#define UBASIC_DATA		0
 
 // String-Support
-#define UBASIC_STRING	1
+#define UBASIC_STRING	0
 
 // exit(1) in Fehlersituationen macht sich bei AVRs etwas schlecht...
 #ifndef BREAK_NOT_EXIT
@@ -129,19 +138,21 @@
 	#define USE_PROGMEM		1
 	// AVR-spezifischen Befehle an-/abwaehlen
 	#define AVR_WAIT		1
-	#define AVR_EPEEK		1
-	#define AVR_EPOKE		1
-	#define AVR_DIR			1
-	#define AVR_IN			1
-	#define AVR_OUT			1
-	#define AVR_ADC			1
+	#define AVR_EPEEK		0
+	#define AVR_EPOKE		0
+	#define AVR_DIR			0
+	#define AVR_IN			0
+	#define AVR_OUT			0
+	#define AVR_ADC			0
 	// AVR-Ports fuer Basic-Befehle dir, in, out
 	#define HAVE_PORTA		0
-	#define HAVE_PORTB		1
-	#define HAVE_PORTC		1
-	#define HAVE_PORTD		1
+	#define HAVE_PORTB		0
+	#define HAVE_PORTC		0
+	#define HAVE_PORTD		0
 	// AVR: Anzahl der ADC-Eingaenge (0...ACD_COUNT_MAX)
 	#define ADC_COUNT_MAX	4
 #endif // USE_AVR
 
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
+
 #endif /* __UBASIC_CONFIG_H__ */
diff --git a/contrib/avrbasic/ubasic_cvars.c b/contrib/avrbasic/ubasic_cvars.c
index e9707e2..bb957f5 100644
--- a/contrib/avrbasic/ubasic_cvars.c
+++ b/contrib/avrbasic/ubasic_cvars.c
@@ -9,6 +9,11 @@
 * ---------
 *
 ----------------------------------------------------------*/
+
+#include "bot-logic.h"
+#ifdef BEHAVIOUR_UBASIC_AVAILABLE
+#include "sensor.h"
+
 #include "tokenizer_access.h"
 #include "ubasic.h"
 #include "tokenizer.h"
@@ -17,7 +22,7 @@
 
 
 #if USE_AVR
-	#include "../uart/usart.h"
+//	#include "../uart/usart.h"
 #else
 	#include <string.h>
 	#include <stdio.h>
@@ -25,12 +30,6 @@
 
 #if UBASIC_CVARS
 
-//------------------------------------------
-// eine Testvariable in C...
-int va = 123;
-int vb = 456;
-
-
 //--------------------------------------------
 
 // Variablenpointertabelle
@@ -39,8 +38,18 @@ cvars_t cvars[] PROGMEM = {
 #else
 cvars_t cvars[] = {
 #endif
-    {"a", &va},
-    {"b", &vb},
+	{ "sensDistL", &sensDistL }, // Abstandssensoren
+	{ "sensDistR", &sensDistR },
+	{ "sensBorderL", &sensBorderL }, // Abgrundsensoren
+	{ "sensBorderR", &sensBorderR },
+	{ "sensLDRL", &sensLDRL }, // Lichtsensoren
+	{ "sensLDRR", &sensLDRR },
+	{ "sensLineL", &sensLineL }, // Liniensensoren
+	{ "sensLineR", &sensLineR },
+	{ "sensLineL", &sensLineL }, // Liniensensoren
+	{ "sensLineR", &sensLineR },
+	{ "sensDoor", (int16_t *) &sensDoor }, // Klappensensor
+	{ "sensTrans", (int16_t *) &sensTrans }, // Transportfach
     {"", NULL}
 };
 
@@ -119,3 +128,5 @@ int vpeek_expression(void) {
 	return r;
 }
 #endif
+
+#endif // BEHAVIOUR_UBASIC_AVAILABLE
diff --git a/contrib/avrbasic/ubasic_cvars.h b/contrib/avrbasic/ubasic_cvars.h
index e8bf41b..5114eba 100644
--- a/contrib/avrbasic/ubasic_cvars.h
+++ b/contrib/avrbasic/ubasic_cvars.h
@@ -19,7 +19,7 @@ typedef struct {
 #else	
 	char *var_name;
 #endif
-	int *pvar;
+	int16_t *pvar;
 } cvars_t;
 
 
